// <auto-generated />
using System;
using FastWiki.EntityFrameworkCore.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastWiki.EntityFrameworkCore.Sqlite.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("FastWiki.Domain.Agents.Aggregates.Agent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("智能体ID");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("智能体头像");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("智能体介绍");

                    b.Property<bool>("IsCollect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTop")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("智能体名称");

                    b.Property<long?>("WorkspaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("agents", null, t =>
                        {
                            t.HasComment("智能体");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Agents.Aggregates.AgentConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("配置ID");

                    b.Property<long>("AgentId")
                        .HasColumnType("INTEGER")
                        .HasComment("智能体ID");

                    b.Property<int>("ContextSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("上下文数量");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxResponseToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(4000)
                        .HasComment("最大回复token");

                    b.Property<string>("Model")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("gpt-4")
                        .HasComment("对话模型");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Opening")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("你好，我是AIDotNet智能助手，我可以帮助您解决问题，您可以问我任何问题。")
                        .HasComment("开场白");

                    b.Property<string>("OutputFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("markdown")
                        .HasComment("输出格式");

                    b.Property<string>("Prompt")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasComment("智能体提示词");

                    b.Property<bool>("SuggestUserQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("是否提供用户建议提问");

                    b.Property<double>("Temperature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.69999999999999996)
                        .HasComment("温度 (0-1) 越高越随机");

                    b.Property<double>("TopP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.90000000000000002)
                        .HasComment("TopP (0-1) 越高越随机");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("agent_configs", null, t =>
                        {
                            t.HasComment("智能体配置信息");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Chat.Aggregates.ChatHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("聊天记录ID");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("使用的智能体ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("聊天内容");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("发送用户IP");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("是否发送消息");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("会话ID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("发送用户ID");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("chat_histories", null, t =>
                        {
                            t.HasComment("聊天记录");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("分类ID");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("分类描述");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("分类名称");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("WorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("categories", null, t =>
                        {
                            t.HasComment("分类");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.Knowledge", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("知识库ID");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("知识库头像");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("知识库分类");

                    b.Property<string>("ChatModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("知识库聊天模型");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("知识库描述");

                    b.Property<string>("EmbeddingModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("知识库嵌入模型,当嵌入模型确认以后不能修改，否则会导致数据不一致");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("知识库名称");

                    b.Property<byte>("RagType")
                        .HasColumnType("INTEGER")
                        .HasComment("知识库 RAG 类型");

                    b.Property<long?>("WorkspaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("knowledges", null, t =>
                        {
                            t.HasComment("知识库");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.KnowledgeItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("知识库条目ID");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DataCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExtraData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KnowledgeId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("知识库ID");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("知识库条目名称");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("Name");

                    b.ToTable("knowledge_items", null, t =>
                        {
                            t.HasComment("知识库条目");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.QuantizedTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("量化任务ID");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnowledgeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("KnowledgeItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ProcessTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("备注");

                    b.Property<byte>("State")
                        .HasColumnType("INTEGER")
                        .HasComment("量化任务状态");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("KnowledgeItemId");

                    b.ToTable("quantized_tasks", null, t =>
                        {
                            t.HasComment("量化任务");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Plugins.Aggregates.Plugin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("插件ID");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("插件头像");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("插件描述");

                    b.Property<bool>("Enable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("插件名称");

                    b.Property<string>("Runtime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("WorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("plugins", null, t =>
                        {
                            t.HasComment("插件");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Plugins.Aggregates.PluginItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("插件项ID");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("插件项描述");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("插件项名称");

                    b.Property<string>("OutputParameters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("PluginId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("PluginId");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("plugin_items", null, t =>
                        {
                            t.HasComment("插件项");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Powers.Aggregates.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("角色ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("角色编码 唯一");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("角色描述");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("角色名称");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("roles", null, t =>
                        {
                            t.HasComment("角色");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Powers.Aggregates.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasComment("用户ID");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasComment("角色ID");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", null, t =>
                        {
                            t.HasComment("用户角色");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Users.Aggregates.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("用户ID");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("用户名");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("头像");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("邮箱");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("简介");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("密码");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("手机号");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("用户");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Users.Aggregates.UserAuthExtensions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("用户认证扩展ID");

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("认证ID");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("认证类型");

                    b.Property<string>("ExtendData")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("扩展数据");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("AuthType", "AuthId");

                    b.ToTable("user_auth_extensions", null, t =>
                        {
                            t.HasComment("用户认证扩展");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("工作空间ID");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("工作空间描述");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("工作空间名称");

                    b.Property<byte>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("work_spaces", null, t =>
                        {
                            t.HasComment("工作空间");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpaceMember", b =>
                {
                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("INTEGER")
                        .HasComment("工作空间ID");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasComment("用户ID");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<byte>("RoleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkSpaceId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkSpaceId");

                    b.HasIndex("WorkSpaceId", "UserId")
                        .IsUnique();

                    b.ToTable("work_space_members", null, t =>
                        {
                            t.HasComment("工作空间成员");
                        });
                });

            modelBuilder.Entity("FastWiki.Domain.Agents.Aggregates.Agent", b =>
                {
                    b.HasOne("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpace", "WorkSpace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("FastWiki.Domain.Agents.Aggregates.AgentConfig", b =>
                {
                    b.HasOne("FastWiki.Domain.Agents.Aggregates.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.Category", b =>
                {
                    b.HasOne("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpace", "WorkSpace")
                        .WithMany()
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.Knowledge", b =>
                {
                    b.HasOne("FastWiki.Domain.Knowledges.Aggregates.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpace", "WorkSpace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.KnowledgeItem", b =>
                {
                    b.HasOne("FastWiki.Domain.Knowledges.Aggregates.Knowledge", "Knowledge")
                        .WithMany()
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("FastWiki.Domain.Knowledges.Aggregates.QuantizedTask", b =>
                {
                    b.HasOne("FastWiki.Domain.Knowledges.Aggregates.Knowledge", "Knowledge")
                        .WithMany()
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastWiki.Domain.Knowledges.Aggregates.KnowledgeItem", "KnowledgeItem")
                        .WithMany()
                        .HasForeignKey("KnowledgeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeItem");
                });

            modelBuilder.Entity("FastWiki.Domain.Plugins.Aggregates.Plugin", b =>
                {
                    b.HasOne("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpace", "WorkSpace")
                        .WithMany()
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("FastWiki.Domain.Plugins.Aggregates.PluginItem", b =>
                {
                    b.HasOne("FastWiki.Domain.Plugins.Aggregates.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpace", "WorkSpace")
                        .WithMany()
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plugin");

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("FastWiki.Domain.Powers.Aggregates.UserRole", b =>
                {
                    b.HasOne("FastWiki.Domain.Powers.Aggregates.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastWiki.Domain.Users.Aggregates.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FastWiki.Domain.Users.Aggregates.UserAuthExtensions", b =>
                {
                    b.HasOne("FastWiki.Domain.Users.Aggregates.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpaceMember", b =>
                {
                    b.HasOne("FastWiki.Domain.Users.Aggregates.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastWiki.Domain.WorkSpaces.Aggregates.WorkSpace", "WorkSpace")
                        .WithMany()
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkSpace");
                });
#pragma warning restore 612, 618
        }
    }
}
